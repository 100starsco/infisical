// Code generated by automation script, DO NOT EDIT.
// Automated by pulling database and generating zod schema
// To update. Just run npm run generate:schema
// Written by akhilmhdh.

import { z } from "zod";

import { zodBuffer } from "@app/lib/zod";

import { TImmutableDBKeys } from "./models";

export const IdentityJwtAuthsSchema = z.object({
  id: z.string().uuid(),
  accessTokenTTL: z.coerce.number().default(7200),
  accessTokenMaxTTL: z.coerce.number().default(7200),
  accessTokenNumUsesLimit: z.coerce.number().default(0),
  accessTokenTrustedIps: z.unknown(),
  identityId: z.string().uuid(),
  configurationType: z.string(),
  jwksUrl: z.string().nullable().optional(),
  encryptedJwksCaCert: zodBuffer.nullable().optional(),
  encryptedPublicKeys: zodBuffer.nullable().optional(),
  boundIssuer: z.string().nullable().optional(),
  boundAudiences: z.string().nullable().optional(),
  boundClaims: z.unknown().nullable().optional(),
  boundSubject: z.string().nullable().optional(),
  createdAt: z.date(),
  updatedAt: z.date()
});

export type TIdentityJwtAuths = z.infer<typeof IdentityJwtAuthsSchema>;
export type TIdentityJwtAuthsInsert = Omit<z.input<typeof IdentityJwtAuthsSchema>, TImmutableDBKeys>;
export type TIdentityJwtAuthsUpdate = Partial<Omit<z.input<typeof IdentityJwtAuthsSchema>, TImmutableDBKeys>>;
